
openapi: 3.0.0
info:
 title: Transmission API Documentation
 description: Subscription and notification preference center API for Crucible Standard 
 version: 0.1.0
  contact:
    name: Crucible Standard Admin
    url: https://www.cruciblestandard.com
    email:
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  servers:
    - url: https://api.cruciblestandard.com
      description: Production server
    - url: https://api.cruciblestandard.com
      description: Staging server
    - url: https://api.cruciblestandard.com
      description: Development server
  tags:
    - name: users
      description: User management
    - name: subscriptions
      description: Subscription management
    - name: notifications
      description: Notification management
  paths:
    /users:
      get:
        tags:
          - users
        summary: Get all users
        description: Returns all users
        operationId: getAllUsers
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          '400':
            description: Invalid status value
        security:
          - bearerAuth: []
      post:
        tags:
          - users
        summary: Create user
        description: Creates a new user
        operationId: createUser
        requestBody:
          description: User object that needs to be added to the store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Invalid status value
        security:
          - bearerAuth: []
    /users/{id}:
      get:
        tags:
          - users
        summary: Get user by id
        description: Returns a single user
        operationId: getUserById
        parameters:
          - name: id
            in: path
            description: ID of user to return
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Invalid status value
          '404':
            description: User not found
        security:
          - bearerAuth: []
      put:
        tags:
          - users
        summary: Update user
        description: Updates a user
        operationId: updateUser
        parameters:
          - name: id
            in: path
            description: ID of user to update
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          description: User object that needs to be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          required: true
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Invalid status value
          '404':
            description: User not found
        security:
          - bearerAuth: []
      delete:
        tags:
          - users
        summary: Delete user
        description: Deletes a user
        operationId: deleteUser
        parameters:
          - name: id
            in: path
            description: ID of user to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Invalid status value
          '404':
            description: User not found
        security:
          - bearerAuth: []

components:
  schemas:
    User:
    type: object
    properties:
      id:
      type: integer
      format: int64
      email:
      type: string
      username:
      type: string
      password:
      type: string
      firstName:
      type: string
      lastName:
      type: string
      created_at:
      type: string
      format: date-time
      updated_at:
      type: string
      format: date-time
    required: [email, username, password]
    example:
      id: 1
      email:
      username:
      password:
      firstName:
      lastName:
      created_at: 2020-01-01T00:00:00.000Z
      updated_at: 2020-01-01T00:00:00.000Z
    required: [email, username, password]
    Subscription:
    type: object
    